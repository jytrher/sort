import random
import time

# Функция для генерации массива случайных элементов заданного размера
def generate_array(size):
    return [random.randint(0, 100) for _ in range(size)]

# Функция для выполнения пузырьковой сортировки
def bubble_sort(arr):
    swaps = 0
    start = time.time()
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swaps += 1
    end = time.time()
    return arr, (end - start), swaps

# Функция для выполнения сортировки вставкой
def insertion_sort(arr):
    swaps = 0
    start = time.time()
    for i in range(1, len(arr)):
        key_item = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key_item:
            arr[j + 1] = arr[j]
            j -= 1
            swaps += 1
        arr[j + 1] = key_item
    end = time.time()
    return arr, (end - start), swaps

# Функция для выполнения сортировки выбором
def selection_sort(arr):
    swaps = 0
    start = time.time()
    for i in range(len(arr)):
        min_idx = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
        swaps += 1
    end = time.time()
    return arr, (end - start), swaps

# Функция для выполнения быстрой сортировки
def quicksort(arr):
    swaps = 0
    start = time.time()
    if len(arr) <= 1:
        return arr, 0, 0
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    left, l_swaps, l_time = quicksort(left)
    right, r_swaps, r_time = quicksort(right)
    arr = left + middle + right
    swaps += l_swaps + r_swaps
    end = time.time()
    return arr, (end - start) + l_time + r_time, swaps

# Функция для выполнения сортировки слиянием
def merge_sort(arr):
    swaps = 0
    start = time.time()
    if len(arr) <= 1:
        return arr, 0, 0
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]
    left_half, l_swaps, l_time = merge_sort(left_half)
    right_half, r_swaps, r_time = merge_sort(right_half)
    i = j = 0
    for k in range(len(arr)):
        if i < len(left_half) and j < len(right_half):
            if left_half[i] <= right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
                swaps += 1
        elif i < len(left_half):
            arr[k] = left_half[i]
            i += 1
        else:
            arr[k] = right_half[j]
            j += 1
    end = time.time()
    return arr, (end - start) + l_time + r_time, swaps

# Функция для выполнения шейкерной сортировки
def shaker_sort(arr):
    swaps = 0
    start = time.time()
    n = len(arr)
    swapped = True
    start_index = 0
    end_index = n - 1
    while swapped:
        swapped = False
        for i in range(start_index, end_index):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
                swaps += 1
        if not swapped:
            break
        swapped = False
        end_index = end_index - 1
        for i in range(end_index - 1, start_index - 1, -1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
                swaps += 1
        start_index = start_index + 1
    end = time.time()
    return arr, (end - start), swaps

# Пример использования
array_size = 10000
arr = generate_array(array_size)

print("Original array:", arr)

print("Bubble sort:")
sorted_arr, bubble_time, bubble_swaps = bubble_sort(arr.copy())
print("Sorted array:", sorted_arr)
print(f"Time: {bubble_time:.6f} seconds, Swaps: {bubble_swaps}")

print("Insertion sort:")
sorted_arr, insertion_time, insertion_swaps = insertion_sort(arr.copy())
print("Sorted array:", sorted_arr)
print(f"Time: {insertion_time:.6f} seconds, Swaps: {insertion_swaps}")

print("Selection sort:")
sorted_arr, selection_time, selection_swaps = selection_sort(arr.copy())
print("Sorted array:", sorted_arr)
print(f"Time: {selection_time:.6f} seconds, Swaps: {selection_swaps}")

print("Quicksort:")
sorted_arr, quicksort_time, quicksort_swaps = quicksort(arr.copy())
print("Sorted array:", sorted_arr)
print(f"Time: {quicksort_time:.6f} seconds, Swaps: {quicksort_swaps}")

print("Merge sort:")
sorted_arr, merge_time, merge_swaps = merge_sort(arr.copy())
print("Sorted array:", sorted_arr)
print(f"Time: {merge_time:.6f} seconds, Swaps: {merge_swaps}")

print("Shaker sort:")
sorted_arr, shaker_time, shaker_swaps = shaker_sort(arr.copy())
print("Sorted array:", sorted_arr)
print(f"Time: {shaker_time:.6f} seconds, Swaps: {shaker_swaps}")
